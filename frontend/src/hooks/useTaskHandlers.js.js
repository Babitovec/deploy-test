import axios from "../axios";
import { updateTaskStatus } from '../store/tasksSlice';

const tg = window.Telegram.WebApp;

export const handleEmojiInUsername = async (token, dispatch) => {
  try {
    const response = await axios.get(`/tasks/check-emoji`, {
      headers: {
        'Authorization': 'Bearer ' + token,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      tg.HapticFeedback.notificationOccurred('success');
      console.log("–£—Å–ø–µ—Ö, üî• –∏–º–µ–µ—Ç—Å—è");
      dispatch(updateTaskStatus({ taskName: "emoji_in_name", status: "completed" }));
    } else {
      tg.HapticFeedback.notificationOccurred('error');
      console.log("–ù–µ—É–¥–∞—á–∞, üî• –Ω–µ –∏–º–µ–µ—Ç—Å—è");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–º–æ–¥–∑–∏ üî•:", error);
    tg.HapticFeedback.notificationOccurred('error'); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞
  }
};


export const handleInvitedFriends = async (token, dispatch) => {
  try {
    const response = await axios.get(`/tasks/invite-friends`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      console.log("–£—Å–ø–µ—Ö, –µ—Å—Ç—å 5 —Ä–µ—Ñ–æ–≤.");
      dispatch(updateTaskStatus({ taskName: "invite_5_friends", status: "completed" }));
      tg.HapticFeedback.notificationOccurred('success');
    } else {
      console.log("–ù–µ—Ç 5 —Ä–µ—Ñ–æ–≤.");
      tg.HapticFeedback.notificationOccurred('error');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–æ–≤:", error);
    tg.HapticFeedback.notificationOccurred('error');
  }
};


export const handleConectedWallet = async (token, dispatch) => {
  try {
    const response = await axios.get(`/tasks/connect_wallet`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      console.log("–£—Å–ø–µ—Ö, –∫–æ—à–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω.");
      dispatch(updateTaskStatus({ taskName: "connect_wallet", status: "completed" }));
      tg.HapticFeedback.notificationOccurred('success');
    } else {
      console.log("–ù–µ—É–¥–∞—á–∞, –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
      tg.HapticFeedback.notificationOccurred('error');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:", error);
    tg.HapticFeedback.notificationOccurred('error');
  };
};

export const handleOpenTelegramChannel = async (token, dispatch) => {
  tg.openTelegramLink("https://t.me/flame_coin_community"); //–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–≥ –∫–∞–Ω–∞–ª
  try {
    const response = await axios.get(`/tasks/sub_flame_tg`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      console.log("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–≥ –∫–∞–Ω–∞–ª.");
      dispatch(updateTaskStatus({ taskName: "sub_flame_tg", status: "completed" }));
      tg.HapticFeedback.notificationOccurred('success');
    } else {
      console.log("–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–≥ –∫–∞–Ω–∞–ª.");
      tg.HapticFeedback.notificationOccurred('error');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    tg.HapticFeedback.notificationOccurred('error');
  }
};


export const handleOpenX = async (token, dispatch) => {
  tg.openLink("https://x.com/realDogsHouse"); //–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–≤–∏—Ç—Ç–µ—Ä
  try {
    const response = await axios.get(`/tasks/sub_flame_x`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      console.log("–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ X.");
      dispatch(updateTaskStatus({ taskName: "sub_flame_x", status: "completed" }));
      tg.HapticFeedback.notificationOccurred('success');
    } else {
      console.log("–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ X.");
      tg.HapticFeedback.notificationOccurred('error');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ X:", error);
    tg.HapticFeedback.notificationOccurred('error');
  }
};

export const handleShareOnX = async (token, dispatch) => {
  tg.openLink("https://x.com/realDogsHouse"); //–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É share
  try {
    const response = await axios.get(`/tasks/share_on_x`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'ngrok-skip-browser-warning': 'true',
      },
    });

    if (response.data.completed) {
      console.log("Shared on X.");
      dispatch(updateTaskStatus({ taskName: "share_on_x", status: "completed" }));
      tg.HapticFeedback.notificationOccurred('success');
    } else {
      console.log("Not shared on X.");
      tg.HapticFeedback.notificationOccurred('error');
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ share on X:", error);
    tg.HapticFeedback.notificationOccurred('error');
  }
};
